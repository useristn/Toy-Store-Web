package t4m.toy_store.config;

import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

/**
 * Database migration ƒë·ªÉ c·∫≠p nh·∫≠t enum status th√™m FAILED
 * Ch·∫°y t·ª± ƒë·ªông khi app kh·ªüi ƒë·ªông
 */
@Component
@Order(0) // Ch·∫°y ƒë·∫ßu ti√™n, tr∆∞·ªõc c√°c bean kh√°c
@RequiredArgsConstructor
public class DatabaseMigration implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DatabaseMigration.class);

    private final JdbcTemplate jdbcTemplate;

    @Override
    public void run(String... args) {
        logger.info("üîß Checking database schema...");

        try {
            // Ki·ªÉm tra xem enum ƒë√£ c√≥ FAILED ch∆∞a
            String checkSql = "SHOW COLUMNS FROM orders WHERE Field = 'status'";
            String currentEnum = jdbcTemplate.queryForObject(checkSql, (rs, num) -> rs.getString("Type"));

            if (currentEnum != null && !currentEnum.contains("FAILED")) {
                logger.warn("‚ö†Ô∏è Enum status ch∆∞a c√≥ FAILED, ƒëang c·∫≠p nh·∫≠t...");

                // C·∫≠p nh·∫≠t enum th√™m FAILED
                String alterSql = """
                        ALTER TABLE orders
                        MODIFY COLUMN status ENUM(
                            'PENDING',
                            'CONFIRMED',
                            'PROCESSING',
                            'SHIPPING',
                            'DELIVERED',
                            'FAILED',
                            'CANCELLED',
                            'REFUNDED'
                        ) NOT NULL DEFAULT 'PENDING'
                        """;

                jdbcTemplate.execute(alterSql);
                logger.info("‚úÖ ƒê√£ c·∫≠p nh·∫≠t enum status th√†nh c√¥ng! Th√™m FAILED v√†o database.");
            } else {
                logger.info("‚úÖ Database schema ƒë√£ up-to-date, enum FAILED ƒë√£ t·ªìn t·∫°i.");
            }

            // T·∫°o b·∫£ng support_session n·∫øu ch∆∞a t·ªìn t·∫°i
            createSupportTables();

        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t database schema: {}", e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ app v·∫´n ch·∫°y ƒë∆∞·ª£c
        }
    }

    private void createSupportTables() {
        try {
            // T·∫°o b·∫£ng support_session
            String createSessionTable = """
                    CREATE TABLE IF NOT EXISTS support_session (
                        id BIGINT AUTO_INCREMENT PRIMARY KEY,
                        session_id VARCHAR(255) UNIQUE NOT NULL,
                        user_id BIGINT,
                        user_email VARCHAR(255),
                        user_name VARCHAR(255),
                        status VARCHAR(50) DEFAULT 'ACTIVE',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        unread_count INT DEFAULT 0,
                        INDEX idx_session_id (session_id),
                        INDEX idx_user_id (user_id),
                        INDEX idx_status (status)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """;

            jdbcTemplate.execute(createSessionTable);
            logger.info("‚úÖ ƒê√£ t·∫°o/ki·ªÉm tra b·∫£ng support_session");

            // T·∫°o b·∫£ng support_message
            String createMessageTable = """
                    CREATE TABLE IF NOT EXISTS support_message (
                        id BIGINT AUTO_INCREMENT PRIMARY KEY,
                        session_id VARCHAR(255) NOT NULL,
                        user_id BIGINT,
                        user_email VARCHAR(255),
                        user_name VARCHAR(255),
                        sender_type VARCHAR(50) NOT NULL,
                        message TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        is_read BOOLEAN DEFAULT FALSE,
                        INDEX idx_session_id (session_id),
                        INDEX idx_created_at (created_at),
                        INDEX idx_sender_type (sender_type),
                        FOREIGN KEY (session_id) REFERENCES support_session(session_id) ON DELETE CASCADE
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
                    """;

            jdbcTemplate.execute(createMessageTable);
            logger.info("‚úÖ ƒê√£ t·∫°o/ki·ªÉm tra b·∫£ng support_message");

        } catch (Exception e) {
            logger.error("‚ùå L·ªói khi t·∫°o b·∫£ng support: {}", e.getMessage());
        }
    }
}
