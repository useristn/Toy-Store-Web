package t4m.toy_store.chatbot.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import t4m.toy_store.product.entity.Category;
import t4m.toy_store.product.entity.Product;
import t4m.toy_store.product.repository.CategoryRepository;
import t4m.toy_store.product.service.ProductService;
import t4m.toy_store.chatbot.service.NLUService;
import t4m.toy_store.chatbot.service.NLUService.Intent;
import t4m.toy_store.chatbot.service.NLUService.NLUResult;

import java.math.BigDecimal;
import java.text.NumberFormat;
import java.util.*;

@Service
@RequiredArgsConstructor
public class ChatbotService {
    private static final Logger logger = LoggerFactory.getLogger(ChatbotService.class);
    
    // Retry configuration
    private static final int MAX_RETRIES = 3;
    private static final long RETRY_DELAY_MS = 2000; // 2 seconds
    
    @Value("${gemini.api.key}")
    private String geminiApiKey;
    
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final ProductService productService;
    private final CategoryRepository categoryRepository;
    private final NLUService nluService; // NLU Service for intelligent intent detection
    
    // Store conversation history (conversationId -> list of messages)
    // In production, use Redis or database for scalability
    private final Map<String, List<Map<String, String>>> conversationHistory = new HashMap<>();
    
    // Base system prompt for children's toy store (CONTEXT-AWARE, NON-SEQUENTIAL)
    private static final String BASE_SYSTEM_PROMPT = 
        "B·∫°n l√† AI t∆∞ v·∫•n ƒë·ªì ch∆°i T4M cho tr·∫ª em. Phong c√°ch: th√¢n thi·ªán, vui v·∫ª, ng·∫Øn g·ªçn.\n\n" +
        
        "NGUY√äN T·∫ÆC HO·∫†T ƒê·ªòNG:\n" +
        "1. PH√ÇN T√çCH NG·ªÆ C·∫¢NH: ƒê·ªçc k·ªπ c√¢u h·ªèi c·ªßa user, x√°c ƒë·ªãnh h·ªç c·∫ßn g√¨\n" +
        "2. TR·∫¢ L·ªúI TR·ª∞C TI·∫æP: N·∫øu ƒë·ªß th√¥ng tin trong c√¢u h·ªèi ‚Üí Tr·∫£ l·ªùi ngay, KH√îNG h·ªèi l·∫°i\n" +
        "3. CH·ªà H·ªéI KHI THI·∫æU: Ch·ªâ h·ªèi th√™m khi th·ª±c s·ª± thi·∫øu th√¥ng tin quan tr·ªçng\n\n" +
        
        "C√ÅC T√åNH HU·ªêNG:\n\n" +
        
        "A. H·ªéI V·ªÄ S·∫¢N PH·∫®M C·ª§ TH·ªÇ (Gi√°, T√¨m ki·∫øm, Th√¥ng tin):\n" +
        "   ‚Üí TR·∫¢ L·ªúI NGAY v·ªõi th√¥ng tin t·ª´ DANH S√ÅCH S·∫¢N PH·∫®M\n" +
        "   - N·∫øu C√ì s·∫£n ph·∫©m: Li·ªát k√™ 3-5 s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t\n" +
        "   - N·∫øu KH√îNG C√ì: 'Xin l·ªói, hi·ªán t·∫°i T4M ch∆∞a c√≥ s·∫£n ph·∫©m n√†y. T√¥i g·ª£i √Ω nh·ªØng s·∫£n ph·∫©m HOT:' ‚Üí G·ª£i √Ω 3-4 s·∫£n ph·∫©m hot t·ª´ danh s√°ch\n" +
        "   VD: 'Gi√° xe tƒÉng?' ‚Üí Tr·∫£ l·ªùi gi√° c√°c xe tƒÉng c√≥ trong danh s√°ch\n" +
        "   VD: 'C√≥ b√∫p b√™ Elsa kh√¥ng?' ‚Üí Li·ªát k√™ Elsa n·∫øu c√≥, n·∫øu kh√¥ng th√¨ g·ª£i √Ω b√∫p b√™ kh√°c\n\n" +
        
        "B. T∆Ø V·∫§N QU√Ä C√ì ƒê·ª¶ TH√îNG TIN (tu·ªïi/gi·ªõi t√≠nh/s·ªü th√≠ch r√µ r√†ng):\n" +
        "   ‚Üí TR·∫¢ L·ªúI NGAY v·ªõi g·ª£i √Ω ph√π h·ª£p\n" +
        "   - Ph√¢n t√≠ch: tu·ªïi, gi·ªõi t√≠nh, s·ªü th√≠ch t·ª´ c√¢u h·ªèi\n" +
        "   - G·ª£i √Ω 3-4 s·∫£n ph·∫©m C√ì TRONG DANH S√ÅCH ph√π h·ª£p nh·∫•t\n" +
        "   - N·∫øu KH√îNG c√≥ s·∫£n ph·∫©m ph√π h·ª£p: 'Xin l·ªói, T4M ch∆∞a c√≥ s·∫£n ph·∫©m n√†y. G·ª£i √Ω s·∫£n ph·∫©m HOT:' ‚Üí Li·ªát k√™ 3-4 s·∫£n ph·∫©m hot\n" +
        "   VD: 'Qu√† cho b√© g√°i 5 tu·ªïi th√≠ch c√¥ng ch√∫a' ‚Üí G·ª£i √Ω b√∫p b√™ c√¥ng ch√∫a ngay\n" +
        "   VD: 'ƒê·ªì ch∆°i cho b√© trai 8 tu·ªïi th√≠ch robot' ‚Üí G·ª£i √Ω robot/transformer ngay\n\n" +
        
        "C. T∆Ø V·∫§N QU√Ä THI·∫æU TH√îNG TIN QUAN TR·ªåNG:\n" +
        "   ‚Üí CH·ªà H·ªéI nh·ªØng th√¥ng tin thi·∫øu, KH√îNG h·ªèi l·∫°i th√¥ng tin ƒë√£ c√≥\n" +
        "   - N·∫øu thi·∫øu tu·ªïi: 'B√© bao nhi√™u tu·ªïi ·∫°?'\n" +
        "   - N·∫øu thi·∫øu gi·ªõi t√≠nh: 'B√© l√† con trai hay con g√°i ·∫°?'\n" +
        "   - N·∫øu thi·∫øu s·ªü th√≠ch: 'B√© th√≠ch lo·∫°i ƒë·ªì ch∆°i n√†o ·∫°? (VD: b√∫p b√™, xe, lego, khoa h·ªçc...)'\n" +
        "   VD: 'T∆∞ v·∫•n qu√† cho b√©' ‚Üí H·ªèi: 'B√© bao nhi√™u tu·ªïi v√† l√† con trai hay con g√°i ·∫°?'\n\n" +
        
        "D. CH√çNH S√ÅCH/H·ªñ TR·ª¢:\n" +
        "   ‚Üí TR·∫¢ L·ªúI NGAY th√¥ng tin ch√≠nh s√°ch\n" +
        "   - ƒê·ªïi tr·∫£: 7 ng√†y, s·∫£n ph·∫©m nguy√™n tem\n" +
        "   - Giao h√†ng: 1-3 ng√†y, mi·ªÖn ph√≠ t·ª´ 300K\n" +
        "   - Hotline: 1800-363-363\n\n" +
        
        "E. KH√ÅCH CH·ªåN S·∫¢N PH·∫®M (n√≥i t√™n ho·∫∑c 't√¥i ch·ªçn...'):\n" +
        "   ‚Üí B·∫ÆT BU·ªòC tr·∫£ l·ªùi:\n" +
        "   'C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn <T√äN S·∫¢N PH·∫®M>! üéÅ\n\n" +
        "   B·∫°n h√£y t√¨m ki·∫øm \"<T√äN S·∫¢N PH·∫®M>\" tr√™n web T4M ƒë·ªÉ xem chi ti·∫øt v√† ƒë·∫∑t h√†ng.\n\n" +
        "   Ch√∫c b·∫°n mua s·∫Øm vui v·∫ª! üòä'\n\n" +
        
        "‚ö†Ô∏è FORMAT S·∫¢N PH·∫®M (B·∫ÆT BU·ªòC):\n" +
        "   - M·ªñI S·∫¢N PH·∫®M M·ªòT D√íNG (xu·ªëng d√≤ng sau m·ªói s·∫£n ph·∫©m)\n" +
        "   - Format: ‚Ä¢ T√™n | Tr·∫°ng th√°i | M√¥ t·∫£ ng·∫Øn\n" +
        "   - KH√îNG ghi gi√°, KH√îNG g·ªôp nhi·ªÅu s·∫£n ph·∫©m 1 d√≤ng\n" +
        "   VD ƒê√öNG:\n" +
        "   ‚Ä¢ B√∫p b√™ Elsa | C√≤n h√†ng, SALE | C√¥ng ch√∫a bƒÉng gi√° xinh ƒë·∫πp\n" +
        "   ‚Ä¢ B√∫p b√™ Barbie | C√≤n h√†ng | Ng√¥i nh√† m∆° ∆∞·ªõc\n" +
        "   ‚Ä¢ B√∫p b√™ Jasmine | H·∫øt h√†ng | C√¥ng ch√∫a Jasmine quy·∫øn r≈©\n\n" +
        
        "L∆ØU √ù:\n" +
        "- LU√îN ∆∞u ti√™n tr·∫£ l·ªùi tr·ª±c ti·∫øp n·∫øu c√≥ ƒë·ªß th√¥ng tin\n" +
        "- CH·ªà g·ª£i √Ω s·∫£n ph·∫©m C√ì TRONG DANH S√ÅCH\n" +
        "- N·∫øu KH√îNG c√≥ s·∫£n ph·∫©m ph√π h·ª£p ‚Üí Xin l·ªói + g·ª£i √Ω s·∫£n ph·∫©m HOT\n" +
        "- Tr·∫£ l·ªùi NG·∫ÆN G·ªåN, √çT EMOJI\n" +
        "- KH√îNG h·ªèi l·∫°i th√¥ng tin user ƒë√£ cung c·∫•p\n\n";

    
    public String generateResponse(String userMessage, String conversationId) {
        logger.info("=== ChatbotService.generateResponse CALLED (HYBRID MODE) ===");
        logger.info("User message: {}, Conversation ID: {}", userMessage, conversationId);
        logger.info("Gemini API key configured: {}", geminiApiKey != null && !geminiApiKey.isEmpty());
        
        if (geminiApiKey == null || geminiApiKey.equals("YOUR_GEMINI_API_KEY_HERE")) {
            logger.warn("Gemini API key not configured");
            return "Xin l·ªói b·∫°n, chatbot AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£! üòä";
        }
        
        try {
            // üß† NLU ANALYSIS: Detect intent, extract entities, analyze semantics
            NLUResult nluResult = nluService.analyze(userMessage);
            logger.info("üß† NLU Result: {}", nluResult);
            logger.info("   ‚Üí Intent: {} (confidence: {:.2f}%)", 
                       nluResult.getIntent(), nluResult.getConfidence() * 100);
            logger.info("   ‚Üí Language: {}", nluResult.getLanguage());
            logger.info("   ‚Üí Keywords: {}", nluResult.getExtractedKeywords());
            logger.info("   ‚Üí Entities: {}", nluResult.getEntities());
            logger.info("   ‚Üí Use Rule-Based: {}", nluResult.shouldUseRuleBased());
            
            // STEP 2: Handle with rule-based if NLU recommends (FAST PATH ‚ö°)
            if (nluResult.shouldUseRuleBased()) {
                Intent intent = nluResult.getIntent();
                
                switch (intent) {
                    case GREETING:
                        logger.info("‚ö° Using rule-based handler for GREETING");
                        return handleGreeting();
                        
                    case PRICE_QUERY:
                        logger.info("‚ö° Using rule-based handler for PRICE_QUERY");
                        return handlePriceQueryAdvanced(userMessage, nluResult);
                        
                    case PRODUCT_SEARCH:
                        logger.info("‚ö° Using rule-based handler for PRODUCT_SEARCH");
                        return handleProductSearchAdvanced(userMessage, nluResult);
                        
                    case POLICY_QUERY:
                        logger.info("‚ö° Using rule-based handler for POLICY_QUERY");
                        return handlePolicyQuery(userMessage);
                        
                    case COMPARISON:
                        logger.info("‚ö° Using rule-based handler for COMPARISON");
                        return handleComparison(nluResult);
                        
                    case RECOMMENDATION:
                        logger.info("‚ö° Using rule-based handler for RECOMMENDATION");
                        return handleRecommendation(nluResult);
                        
                    case GIFT_CONSULTATION:
                    case UNKNOWN:
                        // Fall through to AI (SMART PATH ü§ñ)
                        logger.info("ü§ñ Low confidence or complex query - forwarding to AI");
                        break;
                }
            } else {
                logger.info("ü§ñ NLU recommends AI path (confidence too low or complex query)");
            }
            
            // STEP 3: Handle with AI for complex queries (ORIGINAL LOGIC)
            // Get or create conversation history
            List<Map<String, String>> history = conversationHistory.computeIfAbsent(conversationId, k -> new ArrayList<>());
            
            // üîç ENRICH WITH DATABASE CONTEXT: Always check if products exist
            String productContext = "";
            List<Product> matchedProducts = new ArrayList<>();
            
            // Try to find products based on NLU keywords
            if (!nluResult.getExtractedKeywords().isEmpty()) {
                logger.info("üîç Searching products with NLU keywords: {}", nluResult.getExtractedKeywords());
                for (String keyword : nluResult.getExtractedKeywords()) {
                    List<Product> found = productService.searchProducts(keyword, PageRequest.of(0, 10)).getContent();
                    if (!found.isEmpty()) {
                        matchedProducts.addAll(found);
                        logger.info("   ‚úÖ Found {} products for keyword '{}'", found.size(), keyword);
                    }
                }
            }
            
            // Build context based on whether products exist
            if (!matchedProducts.isEmpty()) {
                // Products found: provide details to AI
                logger.info("‚úÖ Found {} relevant products - enriching AI with product details", matchedProducts.size());
                StringBuilder sb = new StringBuilder("\n\nS·∫¢N PH·∫®M LI√äN QUAN:\n");
                matchedProducts.stream()
                    .distinct()
                    .limit(10)
                    .forEach(p -> {
                        sb.append(String.format("- %s | Gi√°: %s | C√≤n: %d | %s\n",
                            p.getName(),
                            formatCurrency(p.getPrice()),
                            p.getStock(),
                            p.getStock() > 0 ? "‚úÖ C√≤n h√†ng" : "‚ùå H·∫øt h√†ng"));
                    });
                productContext = sb.toString();
            } else {
                // No products: tell AI explicitly
                logger.info("‚ùå No products found for keywords: {}", nluResult.getExtractedKeywords());
                productContext = "\n\n‚ö†Ô∏è KH√îNG T√åM TH·∫§Y S·∫¢N PH·∫®M PH√ô H·ª¢P v·ªõi t·ª´ kh√≥a: " + 
                               String.join(", ", nluResult.getExtractedKeywords()) + 
                               "\n‚Üí H√£y xin l·ªói v√† G·ª¢I √ù 3-4 S·∫¢N PH·∫®M HOT kh√°c (robot, lego, b√∫p b√™, xe ƒëi·ªÅu khi·ªÉn)\n";
            }
            
            // SMART CONTEXT LOADING: Load general categories if needed (for first message)
            if (history.isEmpty() && matchedProducts.isEmpty()) {
                // First message: only show category overview (lightweight)
                logger.info("First message - loading category overview...");
                productContext = buildProductContext(); // Returns category overview
                logger.info("Category overview built: {} characters", productContext.length());
            } else if (history.size() >= 2) {
                // After user answered preference question, load specific products
                logger.info("User specified preference - loading relevant products...");
                productContext = buildProductsByKeywords(userMessage);
                logger.info("Product context built: {} characters, Message: {}", productContext.length(), userMessage);
            } else {
                logger.info("Second message (gender question) - no product loading needed");
                productContext = ""; // AI already knows categories
            }
            
            // Add user message to history
            Map<String, String> userMsg = new HashMap<>();
            userMsg.put("role", "user");
            userMsg.put("message", userMessage);
            history.add(userMsg);
            
            // Build conversation context from history (keep it SHORT)
            StringBuilder conversationContext = new StringBuilder();
            // Only include recent messages (last 6 messages = 3 turns)
            int startIdx = Math.max(0, history.size() - 6);
            for (int i = startIdx; i < history.size(); i++) {
                Map<String, String> msg = history.get(i);
                if ("user".equals(msg.get("role"))) {
                    conversationContext.append("Kh√°ch: ").append(msg.get("message")).append("\n");
                } else if ("assistant".equals(msg.get("role"))) {
                    conversationContext.append("AI: ").append(msg.get("message")).append("\n");
                }
            }
            
            // Build the full prompt
            String fullPrompt;
            if (history.size() == 1) {
                // First message: include category overview
                fullPrompt = BASE_SYSTEM_PROMPT + productContext + 
                           "\n\nKh√°ch h√†ng h·ªèi: " + userMessage + "\n\nTr·∫£ l·ªùi:";
            } else if (!productContext.isEmpty()) {
                // User specified preference: include specific products + conversation
                fullPrompt = BASE_SYSTEM_PROMPT + productContext +
                           "\n\nH·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n" + conversationContext.toString() + 
                           "\n\nD·ª±a v√†o danh s√°ch s·∫£n ph·∫©m ·ªü tr√™n, g·ª£i √Ω 3-4 s·∫£n ph·∫©m T·ªêT NH·∫§T cho kh√°ch:";
            } else {
                // Other follow-up messages: just conversation history
                fullPrompt = BASE_SYSTEM_PROMPT + 
                           "\n\nH·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n" + conversationContext.toString() + 
                           "\n\nTr·∫£ l·ªùi tin nh·∫Øn m·ªõi nh·∫•t (ng·∫Øn g·ªçn):";
            }
            
            logger.info("Prompt length: {} chars (~{} tokens), History: {} msgs", 
                       fullPrompt.length(), fullPrompt.length() / 4, history.size());
            
            // Gemini API endpoint (using v1 stable API with gemini-2.5-flash - latest model)
            String apiUrl = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=" + geminiApiKey;
            
            // Build request body
            Map<String, Object> requestBody = new HashMap<>();
            Map<String, Object> content = new HashMap<>();
            Map<String, String> part = new HashMap<>();
            part.put("text", fullPrompt);
            content.put("parts", List.of(part));
            requestBody.put("contents", List.of(content));
            
            // Add generation config for better responses
            Map<String, Object> generationConfig = new HashMap<>();
            generationConfig.put("temperature", 0.7);
            generationConfig.put("topK", 40);
            generationConfig.put("topP", 0.95);
            generationConfig.put("maxOutputTokens", 2048); // Increased to 2048 for product recommendations
            requestBody.put("generationConfig", generationConfig);
            
            // Set headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            
            // Call Gemini API with retry logic
            ResponseEntity<String> response = callGeminiAPIWithRetry(apiUrl, entity);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                String responseBody = response.getBody();
                logger.debug("Gemini API response body: {}", responseBody);
                
                // Parse response
                JsonNode root = objectMapper.readTree(responseBody);
                
                // Check for error in response
                if (root.has("error")) {
                    JsonNode error = root.get("error");
                    String errorMsg = error.path("message").asText("Unknown error");
                    logger.error("Gemini API error: {}", errorMsg);
                    return "Xin l·ªói b·∫°n, m√¨nh g·∫∑p l·ªói t·ª´ AI: " + errorMsg + ". Vui l√≤ng th·ª≠ l·∫°i sau nh√©! üòä";
                }
                
                // Check if response has candidates
                if (!root.has("candidates")) {
                    logger.error("Response missing 'candidates' field. Full response: {}", responseBody);
                    return "Xin l·ªói b·∫°n, AI kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                }
                
                JsonNode candidates = root.get("candidates");
                
                if (candidates.isArray() && candidates.size() > 0) {
                    JsonNode firstCandidate = candidates.get(0);
                    
                    // Check if blocked by safety filters
                    if (firstCandidate.has("finishReason")) {
                        String finishReason = firstCandidate.get("finishReason").asText();
                        if ("SAFETY".equals(finishReason)) {
                            logger.warn("Response blocked by safety filters");
                            return "Xin l·ªói b·∫°n, c√¢u h·ªèi n√†y kh√¥ng ph√π h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                        }
                    }
                    
                    JsonNode content_node = firstCandidate.path("content");
                    JsonNode parts = content_node.path("parts");
                    
                    if (parts.isArray() && parts.size() > 0) {
                        String aiResponse = parts.get(0).path("text").asText();
                        
                        if (aiResponse == null || aiResponse.trim().isEmpty()) {
                            logger.error("AI response is empty. Candidate: {}", firstCandidate.toString());
                            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                        }
                        
                        logger.info("Gemini AI response generated successfully for conversation: {}", conversationId);
                        
                        // Add AI response to history
                        Map<String, String> assistantMsg = new HashMap<>();
                        assistantMsg.put("role", "assistant");
                        assistantMsg.put("message", aiResponse);
                        conversationHistory.get(conversationId).add(assistantMsg);
                        
                        return aiResponse;
                    } else {
                        logger.error("Parts array is empty or missing. Candidate: {}", firstCandidate.toString());
                    }
                } else {
                    logger.error("Candidates array is empty or missing. Root: {}", root.toString());
                }
            } else {
                logger.error("Gemini API returned status: {}, body: {}", response.getStatusCode(), response.getBody());
            }
            
            logger.warn("Unexpected response format from Gemini API. Could not extract text from response.");
            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay b√¢y gi·ªù. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi c√¢u kh√°c ho·∫∑c li√™n h·ªá hotline 1800-363-363 nh√©! üòä";
            
        } catch (Exception e) {
            logger.error("Error calling Gemini API for conversation: " + conversationId, e);
            logger.error("Error details - Type: {}, Message: {}", e.getClass().getName(), e.getMessage());
            if (e.getCause() != null) {
                logger.error("Caused by: {}", e.getCause().getMessage());
            }
            
            // Check if it's an overload error
            String errorMsg = e.getMessage();
            if (errorMsg != null && (errorMsg.contains("overloaded") || errorMsg.contains("503"))) {
                return "Xin l·ªói b·∫°n, h·ªá th·ªëng AI ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau 1-2 ph√∫t ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! üòä";
            }
            
            return "Xin l·ªói b·∫°n, m√¨nh ƒëang g·∫∑p ch√∫t tr·ª•c tr·∫∑c k·ªπ thu·∫≠t. B·∫°n th·ª≠ l·∫°i sau ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! üòä";
        }
    }
    
    public String generateConversationId() {
        return UUID.randomUUID().toString();
    }
    
    // ==================== RULE-BASED HANDLERS ====================
    
    /**
     * Handle greeting intent
     */
    private String handleGreeting() {
        return "Ch√†o b·∫°n! M√¨nh l√† T4M AI Tr·ª£ l√Ω ü§ñ\n\n" +
               "M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
               "‚Ä¢ T∆∞ v·∫•n qu√† cho b√©\n" +
               "‚Ä¢ T√¨m ki·∫øm s·∫£n ph·∫©m\n" +
               "‚Ä¢ H·ªèi v·ªÅ gi√° c·∫£\n" +
               "‚Ä¢ Ch√≠nh s√°ch ƒë·ªïi tr·∫£, giao h√†ng\n\n" +
               "B·∫°n c·∫ßn gi√∫p g√¨ ·∫°? üòä";
    }
    
    // ==================== ADVANCED NLU-POWERED HANDLERS ====================
    
    /**
     * Advanced price query handler with NLU entities
     */
    private String handlePriceQueryAdvanced(String message, NLUResult nluResult) {
        // Extract keywords from NLU
        List<String> keywords = nluResult.getExtractedKeywords();
        String keyword = keywords.isEmpty() ? extractKeyword(message) : keywords.get(0);
        
        if (keyword.isEmpty()) {
            return "B·∫°n mu·ªën h·ªèi gi√° s·∫£n ph·∫©m n√†o ·∫°? üí∞\n" +
                   "V√≠ d·ª•: 'Gi√° b√∫p b√™ Elsa', 'Xe √¥ t√¥ bao nhi√™u ti·ªÅn'";
        }
        
        logger.info("üîç Searching products with keyword: {}", keyword);
        List<Product> products = productService.searchProducts(keyword, PageRequest.of(0, 5)).getContent();
        
        if (products.isEmpty()) {
            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ t·ª´ kh√≥a '" + keyword + "' üò¢\n\n" +
                   "B·∫°n c√≥ th·ªÉ th·ª≠:\n" +
                   "‚Ä¢ T√¨m theo danh m·ª•c: 'B√∫p b√™', 'Xe', 'Lego', 'Robot'\n" +
                   "‚Ä¢ G·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp";
        }
        
        StringBuilder response = new StringBuilder();
        response.append("üí∞ Gi√° s·∫£n ph·∫©m li√™n quan ƒë·∫øn \"").append(keyword).append("\":\n\n");
        
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        
        for (Product p : products) {
            response.append("‚Ä¢ ").append(p.getName()).append("\n");
            
            if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                response.append("  Gi√° g·ªëc: ").append(vndFormat.format(p.getPrice())).append("\n");
                response.append("  Gi√° SALE: ").append(vndFormat.format(p.getDiscountPrice())).append(" üî•\n");
            } else {
                response.append("  Gi√°: ").append(vndFormat.format(p.getPrice())).append("\n");
            }
            
            if (p.getStock() != null && p.getStock() > 0) {
                response.append("  ‚úÖ C√≤n h√†ng\n");
            } else {
                response.append("  ‚ùå H·∫øt h√†ng\n");
            }
            response.append("\n");
        }
        
        response.append("T√¨m ki·∫øm \"").append(keyword).append("\" tr√™n website T4M ƒë·ªÉ xem chi ti·∫øt! üéÅ");
        return response.toString();
    }
    
    /**
     * Advanced product search handler with NLU entities
     */
    private String handleProductSearchAdvanced(String message, NLUResult nluResult) {
        // Extract keywords from NLU
        List<String> keywords = nluResult.getExtractedKeywords();
        String keyword = keywords.isEmpty() ? extractKeyword(message) : keywords.get(0);
        
        if (keyword.isEmpty()) {
            return "B·∫°n ƒëang t√¨m s·∫£n ph·∫©m g√¨ ·∫°? üîç\n" +
                   "V√≠ d·ª•: 'T√¨m b√∫p b√™ Elsa', 'C√≥ xe n√†o ƒë·∫πp kh√¥ng'";
        }
        
        logger.info("üîç Searching products with keyword: {}", keyword);
        List<Product> products = productService.searchProducts(keyword, PageRequest.of(0, 8)).getContent();
        
        if (products.isEmpty()) {
            return "Xin l·ªói b·∫°n, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p üò¢\n\n" +
                   "üè∑Ô∏è Danh m·ª•c c√≥ s·∫µn:\n" +
                   "üë∏ B√∫p b√™ | üöÄ Xe | üß© Lego | üî¨ Khoa h·ªçc\n" +
                   "‚öΩ Th·ªÉ thao | üé® Ngh·ªá thu·∫≠t | ü§ñ Robot | üé≤ Board Game";
        }
        
        StringBuilder response = new StringBuilder();
        response.append("üîç T√¨m th·∫•y ").append(products.size()).append(" s·∫£n ph·∫©m li√™n quan \"")
               .append(keyword).append("\":\n\n");
        
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        
        for (Product p : products) {
            response.append("‚Ä¢ ").append(p.getName());
            
            if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                response.append(" | ").append(vndFormat.format(p.getDiscountPrice())).append(" üî•");
            } else {
                response.append(" | ").append(vndFormat.format(p.getPrice()));
            }
            
            if (p.getStock() != null && p.getStock() > 0) {
                response.append(" | ‚úÖ");
            } else {
                response.append(" | ‚ùå");
            }
            response.append("\n");
        }
        
        response.append("\nT√¨m ki·∫øm \"").append(keyword).append("\" tr√™n web T4M ƒë·ªÉ xem chi ti·∫øt! üõí");
        return response.toString();
    }
    
    /**
     * Handle product comparison
     */
    private String handleComparison(NLUResult nluResult) {
        List<String> keywords = nluResult.getExtractedKeywords();
        
        if (keywords.size() < 2) {
            return "ƒê·ªÉ so s√°nh, b·∫°n h√£y cho m√¨nh bi·∫øt 2 s·∫£n ph·∫©m c·∫ßn so s√°nh nh√©! üîÑ\n" +
                   "V√≠ d·ª•: 'So s√°nh Lego Classic v·ªõi Lego Technic'";
        }
        
        // Get products for comparison
        String keyword1 = keywords.get(0);
        String keyword2 = keywords.get(1);
        
        List<Product> products1 = productService.searchProducts(keyword1, PageRequest.of(0, 1)).getContent();
        List<Product> products2 = productService.searchProducts(keyword2, PageRequest.of(0, 1)).getContent();
        
        if (products1.isEmpty() || products2.isEmpty()) {
            return "Xin l·ªói, m√¨nh kh√¥ng t√¨m th·∫•y ƒë·ªß th√¥ng tin ƒë·ªÉ so s√°nh üò¢\n" +
                   "B·∫°n th·ª≠ h·ªèi AI nh√©: 'T∆∞ v·∫•n gi√∫p t√¥i ch·ªçn gi·ªØa " + keyword1 + " v√† " + keyword2 + "'";
        }
        
        Product p1 = products1.get(0);
        Product p2 = products2.get(0);
        
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        
        return String.format(
            "üîÑ So s√°nh 2 s·∫£n ph·∫©m:\n\n" +
            "üì¶ %s\n" +
            "   Gi√°: %s\n" +
            "   Danh m·ª•c: %s\n" +
            "   Tr·∫°ng th√°i: %s\n\n" +
            "üì¶ %s\n" +
            "   Gi√°: %s\n" +
            "   Danh m·ª•c: %s\n" +
            "   Tr·∫°ng th√°i: %s\n\n" +
            "B·∫°n mu·ªën bi·∫øt th√™m chi ti·∫øt g√¨ v·ªÅ 2 s·∫£n ph·∫©m n√†y kh√¥ng? üòä",
            p1.getName(),
            vndFormat.format(p1.getDiscountPrice() != null ? p1.getDiscountPrice() : p1.getPrice()),
            p1.getCategory().getName(),
            (p1.getStock() != null && p1.getStock() > 0) ? "C√≤n h√†ng ‚úÖ" : "H·∫øt h√†ng ‚ùå",
            p2.getName(),
            vndFormat.format(p2.getDiscountPrice() != null ? p2.getDiscountPrice() : p2.getPrice()),
            p2.getCategory().getName(),
            (p2.getStock() != null && p2.getStock() > 0) ? "C√≤n h√†ng ‚úÖ" : "H·∫øt h√†ng ‚ùå"
        );
    }
    
    /**
     * Handle product recommendation based on NLU entities
     */
    private String handleRecommendation(NLUResult nluResult) {
        Map<String, Object> entities = nluResult.getEntities();
        
        // Check if we have age or gender info
        Integer age = (Integer) entities.get("age");
        String gender = (String) entities.get("gender");
        
        StringBuilder response = new StringBuilder();
        response.append("üí° G·ª£i √Ω s·∫£n ph·∫©m t·ª´ T4M:\n\n");
        
        // Recommend based on age
        String ageRange = "";
        if (age != null) {
            if (age <= 3) ageRange = "0-3 tu·ªïi";
            else if (age <= 6) ageRange = "3-6 tu·ªïi";
            else if (age <= 12) ageRange = "6-12 tu·ªïi";
            else ageRange = "12+ tu·ªïi";
            
            response.append("ƒê·ªô tu·ªïi: ").append(age).append(" tu·ªïi (").append(ageRange).append(")\n");
        }
        
        if (gender != null) {
            response.append("Gi·ªõi t√≠nh: ").append(gender.equals("male") ? "B√© trai" : "B√© g√°i").append("\n");
        }
        
        response.append("\nƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, m√¨nh s·∫Ω h·ªèi th√™m v√†i c√¢u n·ªØa nh√©! üòä\n");
        response.append("B·∫°n c√≥ th·ªÉ h·ªèi AI: 'T∆∞ v·∫•n qu√† cho b√©");
        if (age != null) response.append(" ").append(age).append(" tu·ªïi");
        if (gender != null) response.append(gender.equals("male") ? " trai" : " g√°i");
        response.append("'");
        
        return response.toString();
    }
    
    // ==================== LEGACY HANDLERS (for backward compatibility) ====================
    
    /**
     * Handle price query - search products and show prices
     * @deprecated Use handlePriceQueryAdvanced instead
     */
    @Deprecated
    private String handlePriceQuery(String message) {
        String keyword = extractKeyword(message);
        
        if (keyword.isEmpty()) {
            return "B·∫°n mu·ªën h·ªèi gi√° s·∫£n ph·∫©m n√†o ·∫°? üí∞\n" +
                   "V√≠ d·ª•: 'Gi√° b√∫p b√™ Elsa', 'Xe √¥ t√¥ bao nhi√™u ti·ªÅn'";
        }
        
        List<Product> products = productService.searchProducts(keyword, PageRequest.of(0, 5)).getContent();
        
        if (products.isEmpty()) {
            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o c√≥ t·ª´ kh√≥a '" + keyword + "' üò¢\n\n" +
                   "B·∫°n c√≥ th·ªÉ th·ª≠:\n" +
                   "‚Ä¢ T√¨m theo danh m·ª•c: 'B√∫p b√™', 'Xe', 'Lego', 'Robot'\n" +
                   "‚Ä¢ G·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp";
        }
        
        StringBuilder response = new StringBuilder();
        response.append("üí∞ Gi√° s·∫£n ph·∫©m li√™n quan ƒë·∫øn \"").append(keyword).append("\":\n\n");
        
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        
        for (Product p : products) {
            response.append("‚Ä¢ ").append(p.getName()).append("\n");
            
            if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                response.append("  Gi√° g·ªëc: ").append(vndFormat.format(p.getPrice())).append("\n");
                response.append("  Gi√° SALE: ").append(vndFormat.format(p.getDiscountPrice())).append(" üî•\n");
            } else {
                response.append("  Gi√°: ").append(vndFormat.format(p.getPrice())).append("\n");
            }
            
            if (p.getStock() != null && p.getStock() > 0) {
                response.append("  ‚úÖ C√≤n h√†ng\n");
            } else {
                response.append("  ‚ùå H·∫øt h√†ng\n");
            }
            response.append("\n");
        }
        
        response.append("T√¨m ki·∫øm \"").append(keyword).append("\" tr√™n website T4M ƒë·ªÉ xem chi ti·∫øt! üéÅ");
        return response.toString();
    }
    
    /**
     * Handle product search - find and list products
     * @deprecated Use handleProductSearchAdvanced instead
     */
    @Deprecated
    private String handleProductSearch(String message) {
        String keyword = extractKeyword(message);
        
        if (keyword.isEmpty()) {
            return "B·∫°n ƒëang t√¨m s·∫£n ph·∫©m g√¨ ·∫°? üîç\n" +
                   "V√≠ d·ª•: 'T√¨m b√∫p b√™ Elsa', 'C√≥ xe n√†o ƒë·∫πp kh√¥ng'";
        }
        
        List<Product> products = productService.searchProducts(keyword, PageRequest.of(0, 8)).getContent();
        
        if (products.isEmpty()) {
            return "Xin l·ªói b·∫°n, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p üò¢\n\n" +
                   "üè∑Ô∏è Danh m·ª•c c√≥ s·∫µn:\n" +
                   "üë∏ B√∫p b√™ | üöÄ Xe | üß© Lego | üî¨ Khoa h·ªçc\n" +
                   "‚öΩ Th·ªÉ thao | üé® Ngh·ªá thu·∫≠t | ü§ñ Robot | üé≤ Board Game";
        }
        
        StringBuilder response = new StringBuilder();
        response.append("üîç T√¨m th·∫•y ").append(products.size()).append(" s·∫£n ph·∫©m li√™n quan \"")
               .append(keyword).append("\":\n\n");
        
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        
        for (Product p : products) {
            response.append("‚Ä¢ ").append(p.getName());
            
            if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                response.append(" | ").append(vndFormat.format(p.getDiscountPrice())).append(" üî•");
            } else {
                response.append(" | ").append(vndFormat.format(p.getPrice()));
            }
            
            if (p.getStock() != null && p.getStock() > 0) {
                response.append(" | ‚úÖ");
            } else {
                response.append(" | ‚ùå");
            }
            response.append("\n");
        }
        
        response.append("\nT√¨m ki·∫øm \"").append(keyword).append("\" tr√™n web T4M ƒë·ªÉ xem chi ti·∫øt! üõí");
        return response.toString();
    }
    
    /**
     * Handle policy query
     */
    private String handlePolicyQuery(String message) {
        String msg = message.toLowerCase();
        
        StringBuilder response = new StringBuilder();
        response.append("üìã Ch√≠nh s√°ch T4M:\n\n");
        
        if (msg.contains("ƒë·ªïi") || msg.contains("tr·∫£") || msg.contains("ho√†n")) {
            response.append("üîÑ ƒê·ªïi tr·∫£:\n");
            response.append("‚Ä¢ ƒê·ªïi tr·∫£ trong 7 ng√†y\n");
            response.append("‚Ä¢ S·∫£n ph·∫©m c√≤n nguy√™n tem, ch∆∞a qua s·ª≠ d·ª•ng\n");
            response.append("‚Ä¢ Ho√†n ti·ªÅn 100% n·∫øu l·ªói t·ª´ nh√† s·∫£n xu·∫•t\n\n");
        }
        
        if (msg.contains("giao") || msg.contains("v·∫≠n chuy·ªÉn") || msg.contains("ship")) {
            response.append("üöö Giao h√†ng:\n");
            response.append("‚Ä¢ Giao h√†ng to√†n qu·ªëc 1-3 ng√†y\n");
            response.append("‚Ä¢ Mi·ªÖn ph√≠ ship ƒë∆°n t·ª´ 300.000‚Ç´\n");
            response.append("‚Ä¢ ƒê∆°n d∆∞·ªõi 300K ph√≠ ship 30.000‚Ç´\n\n");
        }
        
        if (msg.contains("thanh to√°n")) {
            response.append("üí≥ Thanh to√°n:\n");
            response.append("‚Ä¢ COD (Ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng)\n");
            response.append("‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n");
            response.append("‚Ä¢ V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)\n\n");
        }
        
        if (msg.contains("b·∫£o h√†nh")) {
            response.append("üõ°Ô∏è B·∫£o h√†nh:\n");
            response.append("‚Ä¢ B·∫£o h√†nh 6-12 th√°ng t√πy s·∫£n ph·∫©m\n");
            response.append("‚Ä¢ H·ªó tr·ª£ ƒë·ªïi m·ªõi n·∫øu l·ªói k·ªπ thu·∫≠t\n\n");
        }
        
        // If no specific policy found, show all
        if (!msg.contains("ƒë·ªïi") && !msg.contains("tr·∫£") && 
            !msg.contains("giao") && !msg.contains("thanh to√°n") && 
            !msg.contains("b·∫£o h√†nh")) {
            response.append("üîÑ ƒê·ªïi tr·∫£: 7 ng√†y, ho√†n ti·ªÅn 100%\n");
            response.append("üöö Giao h√†ng: 1-3 ng√†y, mi·ªÖn ph√≠ t·ª´ 300K\n");
            response.append("üí≥ Thanh to√°n: COD, Chuy·ªÉn kho·∫£n, V√≠ ƒëi·ªán t·ª≠\n");
            response.append("üõ°Ô∏è B·∫£o h√†nh: 6-12 th√°ng\n\n");
        }
        
        response.append("üìû Hotline: 1800-363-363 (8h-22h h√†ng ng√†y)");
        return response.toString();
    }
    
    /**
     * Extract keyword from message (remove common words)
     */
    private String extractKeyword(String message) {
        String cleaned = message.toLowerCase()
            .replaceAll("\\b(gi√°|bao nhi√™u|ti·ªÅn|t√¨m|c√≥|b√°n|xem|search|s·∫£n ph·∫©m|ƒë·ªì ch∆°i|v·ªÅ|cho|g√¨|kh√¥ng|·∫°|tim|san pham|do choi)\\b", "")
            .trim()
            .replaceAll("\\s+", " ");
        
        return cleaned.isEmpty() ? "" : cleaned;
    }
    
    /**
     * Format currency in Vietnamese format
     */
    private String formatCurrency(BigDecimal price) {
        NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
        return vndFormat.format(price);
    }
    
    // ==================== END RULE-BASED HANDLERS ====================
    
    /**
     * Build product context from database for AI to have real-time information
     * SMART LOADING: Only load category overview first, then load specific products when needed
     */
    private String buildProductContext() {
        return buildCategoryOverview();
    }
    
    /**
     * Build category overview (ultra lightweight for first message)
     */
    private String buildCategoryOverview() {
        try {
            StringBuilder context = new StringBuilder();
            context.append("DANH M·ª§C:\n");
            
            List<Category> categories = categoryRepository.findAll();
            
            if (!categories.isEmpty()) {
                for (Category cat : categories) {
                    context.append(cat.getIcon()).append(" ").append(cat.getName()).append(" | ");
                }
            }
            
            context.append("\n\nH·ªèi s·ªü th√≠ch kh√°ch ƒë·ªÉ g·ª£i √Ω!\n");
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building category overview", e);
            return "";
        }
    }
    
    /**
     * Build detailed product list for specific category keywords
     */
    private String buildProductsByKeywords(String userMessage) {
        try {
            StringBuilder context = new StringBuilder();
            NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
            
            // Get all categories
            List<Category> categories = categoryRepository.findAll();
            int totalProducts = 0;
            
            // Keyword mapping for Vietnamese
            String msg = userMessage.toLowerCase();
            
            if (!categories.isEmpty()) {
                for (Category cat : categories) {
                    boolean isRelevant = false;
                    String catName = cat.getName().toLowerCase();
                    
                    // Check if category is relevant to user's message
                    if (msg.contains("b√∫p b√™") || msg.contains("c√¥ng ch√∫a") || msg.contains("barbie") || msg.contains("elsa")) {
                        isRelevant = catName.contains("b√∫p b√™") || catName.contains("c√¥ng ch√∫a");
                    } else if (msg.contains("xe") || msg.contains("√¥ t√¥") || msg.contains("phi thuy·ªÅn") || msg.contains("m√°y bay") || msg.contains("t√†u")) {
                        isRelevant = catName.contains("xe") || catName.contains("phi thuy·ªÅn");
                    } else if (msg.contains("x·∫øp h√¨nh") || msg.contains("lego") || msg.contains("gh√©p") || msg.contains("puzzle")) {
                        isRelevant = catName.contains("x·∫øp h√¨nh") || catName.contains("gh√©p");
                    } else if (msg.contains("khoa h·ªçc") || msg.contains("th√≠ nghi·ªám") || msg.contains("stem") || msg.contains("k√≠nh hi·ªÉn vi") || msg.contains("k√≠nh thi√™n vƒÉn")) {
                        isRelevant = catName.contains("khoa h·ªçc") || catName.contains("th√≠ nghi·ªám");
                    } else if (msg.contains("ngo√†i tr·ªùi") || msg.contains("th·ªÉ thao") || msg.contains("b√≥ng") || msg.contains("xe ƒë·∫°p")) {
                        isRelevant = catName.contains("ngo√†i tr·ªùi") || catName.contains("th·ªÉ thao");
                    } else if (msg.contains("ngh·ªá thu·∫≠t") || msg.contains("s√°ng t·∫°o") || msg.contains("v·∫Ω") || msg.contains("m√†u")) {
                        isRelevant = catName.contains("ngh·ªá thu·∫≠t") || catName.contains("s√°ng t·∫°o");
                    } else if (msg.contains("robot") || msg.contains("ƒëi·ªán t·ª≠") || msg.contains("drone") || msg.contains("l·∫≠p tr√¨nh")) {
                        isRelevant = catName.contains("ƒëi·ªán t·ª≠") || catName.contains("robot");
                    } else if (msg.contains("board game") || msg.contains("tr√≠ tu·ªá") || msg.contains("c·ªù")) {
                        isRelevant = catName.contains("board game") || catName.contains("tr√≠ tu·ªá");
                    }
                    
                    // Load products for relevant categories (limit to 10 products for token efficiency)
                    if (isRelevant) {
                        List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 10)).getContent();
                        
                        if (!products.isEmpty()) {
                            context.append("üì¶ ").append(cat.getName().toUpperCase()).append(":\n");
                            
                            for (Product p : products) {
                                totalProducts++;
                                context.append("  ").append(p.getName()).append(" ");
                                
                                // Price with sale info (ultra compact)
                                if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                                    context.append(vndFormat.format(p.getDiscountPrice())).append("üí∞");
                                } else {
                                    context.append(vndFormat.format(p.getPrice()));
                                }
                                
                                // Stock status (icon only)
                                if (p.getStock() != null && p.getStock() > 0) {
                                    context.append(" ‚úì");
                                } else if (p.getStock() != null) {
                                    context.append(" ‚úó");
                                }
                                
                                context.append("\n");
                            }
                            context.append("\n");
                        }
                    }
                }
            }
            
            if (totalProducts > 0) {
                context.insert(0, "S·∫¢N PH·∫®M:\n\n");
                context.append("\n‚úì=C√≤n | ‚úó=H·∫øt | üí∞=SALE\nG·ª¢I √ù 3-4 SP T·ªêT NH·∫§T v·ªõi l√Ω do!\n");
            } else {
                // No matching products, load HOT products as fallback
                context.append(buildHotProducts());
            }
            
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building products by keywords", e);
            return buildHotProducts(); // Fallback to hot products on error
        }
    }
    
    /**
     * Build HOT products list (SALE + In Stock) as fallback when no category matches
     */
    private String buildHotProducts() {
        try {
            StringBuilder context = new StringBuilder();
            NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
            
            context.append("S·∫¢N PH·∫®M HOT (SALE):\n\n");
            
            // Get all categories and find products with SALE
            List<Category> categories = categoryRepository.findAll();
            int hotProductCount = 0;
            
            for (Category cat : categories) {
                if (hotProductCount >= 10) break; // Limit to 10 hot products
                
                List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 10)).getContent();
                
                for (Product p : products) {
                    if (hotProductCount >= 10) break;
                    
                    // Only show products with SALE and in stock
                    if (p.getDiscountPrice() != null && 
                        p.getDiscountPrice().compareTo(p.getPrice()) < 0 &&
                        p.getStock() != null && p.getStock() > 0) {
                        
                        hotProductCount++;
                        context.append("  ").append(p.getName()).append(" ");
                        context.append(vndFormat.format(p.getDiscountPrice())).append(" üí∞‚úì\n");
                    }
                }
            }
            
            if (hotProductCount == 0) {
                // No SALE products, just show any in-stock products
                context.setLength(0);
                context.append("S·∫¢N PH·∫®M PH·ªî BI·∫æN:\n\n");
                
                for (Category cat : categories) {
                    if (hotProductCount >= 10) break;
                    
                    List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 5)).getContent();
                    
                    for (Product p : products) {
                        if (hotProductCount >= 10) break;
                        
                        if (p.getStock() != null && p.getStock() > 0) {
                            hotProductCount++;
                            context.append("  ").append(p.getName()).append(" ");
                            context.append(vndFormat.format(p.getPrice())).append(" ‚úì\n");
                        }
                    }
                }
            }
            
            context.append("\n‚úì=C√≤n | üí∞=SALE\nG·ª¢I √ù 3-4 SP T·ªêT NH·∫§T!\n");
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building hot products", e);
            return "";
        }
    }
    
    /**
     * Call Gemini API with retry mechanism for 503 errors
     */
    private ResponseEntity<String> callGeminiAPIWithRetry(String apiUrl, HttpEntity<Map<String, Object>> entity) {
        int attempt = 0;
        Exception lastException = null;
        
        while (attempt < MAX_RETRIES) {
            attempt++;
            
            try {
                logger.info("Calling Gemini API (attempt {}/{})", attempt, MAX_RETRIES);
                
                ResponseEntity<String> response = restTemplate.exchange(
                    apiUrl,
                    HttpMethod.POST,
                    entity,
                    String.class
                );
                
                logger.info("Gemini API call successful on attempt {}", attempt);
                return response;
                
            } catch (HttpServerErrorException.ServiceUnavailable e) {
                lastException = e;
                logger.warn("Gemini API overloaded (503) on attempt {}. Message: {}", 
                           attempt, e.getMessage());
                
                if (attempt < MAX_RETRIES) {
                    try {
                        logger.info("Waiting {} ms before retry...", RETRY_DELAY_MS);
                        Thread.sleep(RETRY_DELAY_MS);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        throw new RuntimeException("Retry interrupted", ie);
                    }
                }
            } catch (Exception e) {
                // For other exceptions, don't retry
                logger.error("Gemini API error (non-retryable): {}", e.getMessage());
                throw e;
            }
        }
        
        // All retries failed
        logger.error("All {} retry attempts failed. Last error: {}", 
                    MAX_RETRIES, lastException != null ? lastException.getMessage() : "unknown");
        throw new RuntimeException("Gemini API is overloaded after " + MAX_RETRIES + " attempts. Please try again later.", 
                                  lastException);
    }
}
