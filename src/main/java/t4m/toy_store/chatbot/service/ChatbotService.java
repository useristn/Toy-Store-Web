package t4m.toy_store.chatbot.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.client.RestTemplate;
import t4m.toy_store.product.entity.Category;
import t4m.toy_store.product.entity.Product;
import t4m.toy_store.product.repository.CategoryRepository;
import t4m.toy_store.product.service.ProductService;

import java.text.NumberFormat;
import java.util.*;

@Service
@RequiredArgsConstructor
public class ChatbotService {
    private static final Logger logger = LoggerFactory.getLogger(ChatbotService.class);
    
    // Retry configuration
    private static final int MAX_RETRIES = 3;
    private static final long RETRY_DELAY_MS = 2000; // 2 seconds
    
    @Value("${gemini.api.key}")
    private String geminiApiKey;
    
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final ProductService productService;
    private final CategoryRepository categoryRepository;
    
    // Store conversation history (conversationId -> list of messages)
    // In production, use Redis or database for scalability
    private final Map<String, List<Map<String, String>>> conversationHistory = new HashMap<>();
    
    // Base system prompt for children's toy store (COMPACT VERSION - LINE BREAK)
    private static final String BASE_SYSTEM_PROMPT = 
        "B·∫°n l√† AI t∆∞ v·∫•n ƒë·ªì ch∆°i T4M cho tr·∫ª em. Phong c√°ch: th√¢n thi·ªán, vui v·∫ª, ng·∫Øn g·ªçn.\n\n" +
        "QUY TR√åNH:\n" +
        "1. H·ªèi t∆∞ v·∫•n qu√† ‚Üí CH·ªà H·ªéI: 'B√© l√† con trai hay con g√°i ·∫°?'\n" +
        "2. Sau bi·∫øt gi·ªõi t√≠nh ‚Üí CH·ªà H·ªéI: 'B√© th√≠ch lo·∫°i ƒë·ªì ch∆°i n√†o ·∫°?' (ƒë∆∞a g·ª£i √Ω ng·∫Øn)\n" +
        "3. Sau bi·∫øt s·ªü th√≠ch:\n" +
        "   - N·∫æU c√≥ s·∫£n ph·∫©m ph√π h·ª£p TRONG DANH S√ÅCH ‚Üí G·ª¢I √ù 3-4 s·∫£n ph·∫©m\n" +
        "   - N·∫æU KH√îNG c√≥ s·∫£n ph·∫©m ph√π h·ª£p TRONG DANH S√ÅCH ‚Üí B·∫ÆT BU·ªòC tr·∫£ l·ªùi:\n\n" +
        "     'Hi·ªán t·∫°i c·ª≠a h√†ng T4M ch∆∞a c√≥ v·ªÅ lo·∫°i s·∫£n ph·∫©m n√†y ·∫°. T√¥i s·∫Ω g·ª£i √Ω cho b·∫°n m·ªôt v√†i m·∫´u s·∫£n ph·∫©m ƒëang hot b√™n t√¥i.'\n\n" +
        "     (sau ƒë√≥ g·ª£i √Ω 3-4 s·∫£n ph·∫©m t·ª´ danh s√°ch S·∫¢N PH·∫®M HOT)\n\n" +
        "4. KHI KH√ÅCH CH·ªåN S·∫¢N PH·∫®M (n√≥i t√™n s·∫£n ph·∫©m ho·∫∑c 't√¥i ch·ªçn...'):\n" +
        "   ‚Üí B·∫ÆT BU·ªòC tr·∫£ l·ªùi CH√çNH X√ÅC:\n\n" +
        "   'C·∫£m ∆°n b·∫°n ƒë√£ ch·ªçn <T√äN S·∫¢N PH·∫®M>! üéÅ\n\n" +
        "   B·∫°n h√£y t√¨m ki·∫øm \"<T√äN S·∫¢N PH·∫®M>\" tr√™n web T4M c·ªßa ch√∫ng t√¥i ƒë·ªÉ c√≥ th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m n√†y.\n\n" +
        "   Ch√∫c b·∫°n c√≥ m·ªôt tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi tr√™n c·ª≠a h√†ng T4M! üòä'\n\n" +
        "   ‚ö†Ô∏è FORMAT B·∫ÆT BU·ªòC:\n" +
        "   - M·ªñI S·∫¢N PH·∫®M M·ªòT D√íNG (xu·ªëng d√≤ng sau m·ªói s·∫£n ph·∫©m)\n" +
        "   - Format t·ª´ng d√≤ng: ‚Ä¢ T√™n | Tr·∫°ng th√°i | M√¥ t·∫£\n" +
        "   - KH√îNG ghi gi√° ti·ªÅn, KH√îNG g·ªôp nhi·ªÅu s·∫£n ph·∫©m tr√™n 1 d√≤ng\n\n" +
        "   V√ç D·ª§ ƒê√öNG:\n" +
        "   Tuy·ªát v·ªùi! T4M c√≥ g·ª£i √Ω:\n" +
        "   ‚Ä¢ B√∫p b√™ Elsa | C√≤n h√†ng, SALE | C√¥ng ch√∫a Elsa xinh ƒë·∫πp!\n" +
        "   ‚Ä¢ B√∫p b√™ Barbie | C√≤n h√†ng | Ng√¥i nh√† m∆° ∆∞·ªõc c·ªßa Barbie!\n" +
        "   ‚Ä¢ B√∫p b√™ Jasmine | C√≤n h√†ng, SALE | C√¥ng ch√∫a Jasmine quy·∫øn r≈©!\n" +
        "   B·∫°n ch·ªçn m√≥n n√†o ·∫°?\n\n" +
        "   V√ç D·ª§ SAI (TUY·ªÜT ƒê·ªêI TR√ÅNH):\n" +
        "   ‚Ä¢ B√∫p b√™ Elsa | C√≤n h√†ng | Xinh ƒë·∫πp! ‚Ä¢ B√∫p b√™ Barbie | C√≤n h√†ng | Ng√¥i nh√†!\n\n" +
        "L∆ØU √ù: M·ªñI L·∫¶N CH·ªà H·ªéI 1 C√ÇU | Tr·∫£ l·ªùi NG·∫ÆN G·ªåN | √çT EMOJI | CH·ªà g·ª£i √Ω s·∫£n ph·∫©m C√ì TRONG DANH S√ÅCH\n\n" +
        "CH√çNH S√ÅCH: ƒê·ªïi tr·∫£ 7 ng√†y | Giao 1-3 ng√†y | Mi·ªÖn ph√≠ t·ª´ 300K | Hotline: 1800-363-363\n\n";
    
    public String generateResponse(String userMessage, String conversationId) {
        logger.info("=== ChatbotService.generateResponse CALLED ===");
        logger.info("User message: {}, Conversation ID: {}", userMessage, conversationId);
        logger.info("Gemini API key configured: {}", geminiApiKey != null && !geminiApiKey.isEmpty());
        
        if (geminiApiKey == null || geminiApiKey.equals("YOUR_GEMINI_API_KEY_HERE")) {
            logger.warn("Gemini API key not configured");
            return "Xin l·ªói b·∫°n, chatbot AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£! üòä";
        }
        
        try {
            // Get or create conversation history
            List<Map<String, String>> history = conversationHistory.computeIfAbsent(conversationId, k -> new ArrayList<>());
            
            // SMART CONTEXT LOADING: Load products based on conversation stage
            String productContext = "";
            
            if (history.isEmpty()) {
                // First message: only show category overview (lightweight)
                logger.info("First message - loading category overview...");
                productContext = buildProductContext(); // Returns category overview
                logger.info("Category overview built: {} characters", productContext.length());
            } else if (history.size() >= 2) {
                // After user answered preference question, load specific products
                logger.info("User specified preference - loading relevant products...");
                productContext = buildProductsByKeywords(userMessage);
                logger.info("Product context built: {} characters, Message: {}", productContext.length(), userMessage);
            } else {
                logger.info("Second message (gender question) - no product loading needed");
                productContext = ""; // AI already knows categories
            }
            
            // Add user message to history
            Map<String, String> userMsg = new HashMap<>();
            userMsg.put("role", "user");
            userMsg.put("message", userMessage);
            history.add(userMsg);
            
            // Build conversation context from history (keep it SHORT)
            StringBuilder conversationContext = new StringBuilder();
            // Only include recent messages (last 6 messages = 3 turns)
            int startIdx = Math.max(0, history.size() - 6);
            for (int i = startIdx; i < history.size(); i++) {
                Map<String, String> msg = history.get(i);
                if ("user".equals(msg.get("role"))) {
                    conversationContext.append("Kh√°ch: ").append(msg.get("message")).append("\n");
                } else if ("assistant".equals(msg.get("role"))) {
                    conversationContext.append("AI: ").append(msg.get("message")).append("\n");
                }
            }
            
            // Build the full prompt
            String fullPrompt;
            if (history.size() == 1) {
                // First message: include category overview
                fullPrompt = BASE_SYSTEM_PROMPT + productContext + 
                           "\n\nKh√°ch h√†ng h·ªèi: " + userMessage + "\n\nTr·∫£ l·ªùi:";
            } else if (!productContext.isEmpty()) {
                // User specified preference: include specific products + conversation
                fullPrompt = BASE_SYSTEM_PROMPT + productContext +
                           "\n\nH·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n" + conversationContext.toString() + 
                           "\n\nD·ª±a v√†o danh s√°ch s·∫£n ph·∫©m ·ªü tr√™n, g·ª£i √Ω 3-4 s·∫£n ph·∫©m T·ªêT NH·∫§T cho kh√°ch:";
            } else {
                // Other follow-up messages: just conversation history
                fullPrompt = BASE_SYSTEM_PROMPT + 
                           "\n\nH·ªòI THO·∫†I G·∫¶N ƒê√ÇY:\n" + conversationContext.toString() + 
                           "\n\nTr·∫£ l·ªùi tin nh·∫Øn m·ªõi nh·∫•t (ng·∫Øn g·ªçn):";
            }
            
            logger.info("Prompt length: {} chars (~{} tokens), History: {} msgs", 
                       fullPrompt.length(), fullPrompt.length() / 4, history.size());
            
            // Gemini API endpoint (using v1 stable API with gemini-2.5-flash - latest model)
            String apiUrl = "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=" + geminiApiKey;
            
            // Build request body
            Map<String, Object> requestBody = new HashMap<>();
            Map<String, Object> content = new HashMap<>();
            Map<String, String> part = new HashMap<>();
            part.put("text", fullPrompt);
            content.put("parts", List.of(part));
            requestBody.put("contents", List.of(content));
            
            // Add generation config for better responses
            Map<String, Object> generationConfig = new HashMap<>();
            generationConfig.put("temperature", 0.7);
            generationConfig.put("topK", 40);
            generationConfig.put("topP", 0.95);
            generationConfig.put("maxOutputTokens", 2048); // Increased to 2048 for product recommendations
            requestBody.put("generationConfig", generationConfig);
            
            // Set headers
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);
            
            // Call Gemini API with retry logic
            ResponseEntity<String> response = callGeminiAPIWithRetry(apiUrl, entity);
            
            if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
                String responseBody = response.getBody();
                logger.debug("Gemini API response body: {}", responseBody);
                
                // Parse response
                JsonNode root = objectMapper.readTree(responseBody);
                
                // Check for error in response
                if (root.has("error")) {
                    JsonNode error = root.get("error");
                    String errorMsg = error.path("message").asText("Unknown error");
                    logger.error("Gemini API error: {}", errorMsg);
                    return "Xin l·ªói b·∫°n, m√¨nh g·∫∑p l·ªói t·ª´ AI: " + errorMsg + ". Vui l√≤ng th·ª≠ l·∫°i sau nh√©! üòä";
                }
                
                // Check if response has candidates
                if (!root.has("candidates")) {
                    logger.error("Response missing 'candidates' field. Full response: {}", responseBody);
                    return "Xin l·ªói b·∫°n, AI kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                }
                
                JsonNode candidates = root.get("candidates");
                
                if (candidates.isArray() && candidates.size() > 0) {
                    JsonNode firstCandidate = candidates.get(0);
                    
                    // Check if blocked by safety filters
                    if (firstCandidate.has("finishReason")) {
                        String finishReason = firstCandidate.get("finishReason").asText();
                        if ("SAFETY".equals(finishReason)) {
                            logger.warn("Response blocked by safety filters");
                            return "Xin l·ªói b·∫°n, c√¢u h·ªèi n√†y kh√¥ng ph√π h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                        }
                    }
                    
                    JsonNode content_node = firstCandidate.path("content");
                    JsonNode parts = content_node.path("parts");
                    
                    if (parts.isArray() && parts.size() > 0) {
                        String aiResponse = parts.get(0).path("text").asText();
                        
                        if (aiResponse == null || aiResponse.trim().isEmpty()) {
                            logger.error("AI response is empty. Candidate: {}", firstCandidate.toString());
                            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c g·ªçi hotline 1800-363-363 nh√©! üòä";
                        }
                        
                        logger.info("Gemini AI response generated successfully for conversation: {}", conversationId);
                        
                        // Add AI response to history
                        Map<String, String> assistantMsg = new HashMap<>();
                        assistantMsg.put("role", "assistant");
                        assistantMsg.put("message", aiResponse);
                        conversationHistory.get(conversationId).add(assistantMsg);
                        
                        return aiResponse;
                    } else {
                        logger.error("Parts array is empty or missing. Candidate: {}", firstCandidate.toString());
                    }
                } else {
                    logger.error("Candidates array is empty or missing. Root: {}", root.toString());
                }
            } else {
                logger.error("Gemini API returned status: {}, body: {}", response.getStatusCode(), response.getBody());
            }
            
            logger.warn("Unexpected response format from Gemini API. Could not extract text from response.");
            return "Xin l·ªói b·∫°n, m√¨nh kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay b√¢y gi·ªù. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi c√¢u kh√°c ho·∫∑c li√™n h·ªá hotline 1800-363-363 nh√©! üòä";
            
        } catch (Exception e) {
            logger.error("Error calling Gemini API for conversation: " + conversationId, e);
            logger.error("Error details - Type: {}, Message: {}", e.getClass().getName(), e.getMessage());
            if (e.getCause() != null) {
                logger.error("Caused by: {}", e.getCause().getMessage());
            }
            
            // Check if it's an overload error
            String errorMsg = e.getMessage();
            if (errorMsg != null && (errorMsg.contains("overloaded") || errorMsg.contains("503"))) {
                return "Xin l·ªói b·∫°n, h·ªá th·ªëng AI ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau 1-2 ph√∫t ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! üòä";
            }
            
            return "Xin l·ªói b·∫°n, m√¨nh ƒëang g·∫∑p ch√∫t tr·ª•c tr·∫∑c k·ªπ thu·∫≠t. B·∫°n th·ª≠ l·∫°i sau ho·∫∑c g·ªçi hotline 1800-363-363 ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ tr·ª±c ti·∫øp nh√©! üòä";
        }
    }
    
    public String generateConversationId() {
        return UUID.randomUUID().toString();
    }
    
    /**
     * Build product context from database for AI to have real-time information
     * SMART LOADING: Only load category overview first, then load specific products when needed
     */
    private String buildProductContext() {
        return buildCategoryOverview();
    }
    
    /**
     * Build category overview (ultra lightweight for first message)
     */
    private String buildCategoryOverview() {
        try {
            StringBuilder context = new StringBuilder();
            context.append("DANH M·ª§C:\n");
            
            List<Category> categories = categoryRepository.findAll();
            
            if (!categories.isEmpty()) {
                for (Category cat : categories) {
                    context.append(cat.getIcon()).append(" ").append(cat.getName()).append(" | ");
                }
            }
            
            context.append("\n\nH·ªèi s·ªü th√≠ch kh√°ch ƒë·ªÉ g·ª£i √Ω!\n");
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building category overview", e);
            return "";
        }
    }
    
    /**
     * Build detailed product list for specific category keywords
     */
    private String buildProductsByKeywords(String userMessage) {
        try {
            StringBuilder context = new StringBuilder();
            NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
            
            // Get all categories
            List<Category> categories = categoryRepository.findAll();
            int totalProducts = 0;
            
            // Keyword mapping for Vietnamese
            String msg = userMessage.toLowerCase();
            
            if (!categories.isEmpty()) {
                for (Category cat : categories) {
                    boolean isRelevant = false;
                    String catName = cat.getName().toLowerCase();
                    
                    // Check if category is relevant to user's message
                    if (msg.contains("b√∫p b√™") || msg.contains("c√¥ng ch√∫a") || msg.contains("barbie") || msg.contains("elsa")) {
                        isRelevant = catName.contains("b√∫p b√™") || catName.contains("c√¥ng ch√∫a");
                    } else if (msg.contains("xe") || msg.contains("√¥ t√¥") || msg.contains("phi thuy·ªÅn") || msg.contains("m√°y bay") || msg.contains("t√†u")) {
                        isRelevant = catName.contains("xe") || catName.contains("phi thuy·ªÅn");
                    } else if (msg.contains("x·∫øp h√¨nh") || msg.contains("lego") || msg.contains("gh√©p") || msg.contains("puzzle")) {
                        isRelevant = catName.contains("x·∫øp h√¨nh") || catName.contains("gh√©p");
                    } else if (msg.contains("khoa h·ªçc") || msg.contains("th√≠ nghi·ªám") || msg.contains("stem") || msg.contains("k√≠nh hi·ªÉn vi") || msg.contains("k√≠nh thi√™n vƒÉn")) {
                        isRelevant = catName.contains("khoa h·ªçc") || catName.contains("th√≠ nghi·ªám");
                    } else if (msg.contains("ngo√†i tr·ªùi") || msg.contains("th·ªÉ thao") || msg.contains("b√≥ng") || msg.contains("xe ƒë·∫°p")) {
                        isRelevant = catName.contains("ngo√†i tr·ªùi") || catName.contains("th·ªÉ thao");
                    } else if (msg.contains("ngh·ªá thu·∫≠t") || msg.contains("s√°ng t·∫°o") || msg.contains("v·∫Ω") || msg.contains("m√†u")) {
                        isRelevant = catName.contains("ngh·ªá thu·∫≠t") || catName.contains("s√°ng t·∫°o");
                    } else if (msg.contains("robot") || msg.contains("ƒëi·ªán t·ª≠") || msg.contains("drone") || msg.contains("l·∫≠p tr√¨nh")) {
                        isRelevant = catName.contains("ƒëi·ªán t·ª≠") || catName.contains("robot");
                    } else if (msg.contains("board game") || msg.contains("tr√≠ tu·ªá") || msg.contains("c·ªù")) {
                        isRelevant = catName.contains("board game") || catName.contains("tr√≠ tu·ªá");
                    }
                    
                    // Load products for relevant categories (limit to 10 products for token efficiency)
                    if (isRelevant) {
                        List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 10)).getContent();
                        
                        if (!products.isEmpty()) {
                            context.append("üì¶ ").append(cat.getName().toUpperCase()).append(":\n");
                            
                            for (Product p : products) {
                                totalProducts++;
                                context.append("  ").append(p.getName()).append(" ");
                                
                                // Price with sale info (ultra compact)
                                if (p.getDiscountPrice() != null && p.getDiscountPrice().compareTo(p.getPrice()) < 0) {
                                    context.append(vndFormat.format(p.getDiscountPrice())).append("üí∞");
                                } else {
                                    context.append(vndFormat.format(p.getPrice()));
                                }
                                
                                // Stock status (icon only)
                                if (p.getStock() != null && p.getStock() > 0) {
                                    context.append(" ‚úì");
                                } else if (p.getStock() != null) {
                                    context.append(" ‚úó");
                                }
                                
                                context.append("\n");
                            }
                            context.append("\n");
                        }
                    }
                }
            }
            
            if (totalProducts > 0) {
                context.insert(0, "S·∫¢N PH·∫®M:\n\n");
                context.append("\n‚úì=C√≤n | ‚úó=H·∫øt | üí∞=SALE\nG·ª¢I √ù 3-4 SP T·ªêT NH·∫§T v·ªõi l√Ω do!\n");
            } else {
                // No matching products, load HOT products as fallback
                context.append(buildHotProducts());
            }
            
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building products by keywords", e);
            return buildHotProducts(); // Fallback to hot products on error
        }
    }
    
    /**
     * Build HOT products list (SALE + In Stock) as fallback when no category matches
     */
    private String buildHotProducts() {
        try {
            StringBuilder context = new StringBuilder();
            NumberFormat vndFormat = NumberFormat.getCurrencyInstance(Locale.forLanguageTag("vi-VN"));
            
            context.append("S·∫¢N PH·∫®M HOT (SALE):\n\n");
            
            // Get all categories and find products with SALE
            List<Category> categories = categoryRepository.findAll();
            int hotProductCount = 0;
            
            for (Category cat : categories) {
                if (hotProductCount >= 10) break; // Limit to 10 hot products
                
                List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 10)).getContent();
                
                for (Product p : products) {
                    if (hotProductCount >= 10) break;
                    
                    // Only show products with SALE and in stock
                    if (p.getDiscountPrice() != null && 
                        p.getDiscountPrice().compareTo(p.getPrice()) < 0 &&
                        p.getStock() != null && p.getStock() > 0) {
                        
                        hotProductCount++;
                        context.append("  ").append(p.getName()).append(" ");
                        context.append(vndFormat.format(p.getDiscountPrice())).append(" üí∞‚úì\n");
                    }
                }
            }
            
            if (hotProductCount == 0) {
                // No SALE products, just show any in-stock products
                context.setLength(0);
                context.append("S·∫¢N PH·∫®M PH·ªî BI·∫æN:\n\n");
                
                for (Category cat : categories) {
                    if (hotProductCount >= 10) break;
                    
                    List<Product> products = productService.getProductsByCategory(cat.getId(), PageRequest.of(0, 5)).getContent();
                    
                    for (Product p : products) {
                        if (hotProductCount >= 10) break;
                        
                        if (p.getStock() != null && p.getStock() > 0) {
                            hotProductCount++;
                            context.append("  ").append(p.getName()).append(" ");
                            context.append(vndFormat.format(p.getPrice())).append(" ‚úì\n");
                        }
                    }
                }
            }
            
            context.append("\n‚úì=C√≤n | üí∞=SALE\nG·ª¢I √ù 3-4 SP T·ªêT NH·∫§T!\n");
            return context.toString();
            
        } catch (Exception e) {
            logger.error("Error building hot products", e);
            return "";
        }
    }
    
    /**
     * Call Gemini API with retry mechanism for 503 errors
     */
    private ResponseEntity<String> callGeminiAPIWithRetry(String apiUrl, HttpEntity<Map<String, Object>> entity) {
        int attempt = 0;
        Exception lastException = null;
        
        while (attempt < MAX_RETRIES) {
            attempt++;
            
            try {
                logger.info("Calling Gemini API (attempt {}/{})", attempt, MAX_RETRIES);
                
                ResponseEntity<String> response = restTemplate.exchange(
                    apiUrl,
                    HttpMethod.POST,
                    entity,
                    String.class
                );
                
                logger.info("Gemini API call successful on attempt {}", attempt);
                return response;
                
            } catch (HttpServerErrorException.ServiceUnavailable e) {
                lastException = e;
                logger.warn("Gemini API overloaded (503) on attempt {}. Message: {}", 
                           attempt, e.getMessage());
                
                if (attempt < MAX_RETRIES) {
                    try {
                        logger.info("Waiting {} ms before retry...", RETRY_DELAY_MS);
                        Thread.sleep(RETRY_DELAY_MS);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        throw new RuntimeException("Retry interrupted", ie);
                    }
                }
            } catch (Exception e) {
                // For other exceptions, don't retry
                logger.error("Gemini API error (non-retryable): {}", e.getMessage());
                throw e;
            }
        }
        
        // All retries failed
        logger.error("All {} retry attempts failed. Last error: {}", 
                    MAX_RETRIES, lastException != null ? lastException.getMessage() : "unknown");
        throw new RuntimeException("Gemini API is overloaded after " + MAX_RETRIES + " attempts. Please try again later.", 
                                  lastException);
    }
}
